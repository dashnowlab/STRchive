# Usage:

# Run all stages (default, takes hours):
# snakemake --cores "all"
# or
# snakemake --cores "all" --config stages="all"

# Skip retrieve and manubot, which will speed things up substantially (runs in seconds):
# snakemake --cores "all" --config stages="skip-refs"

# Skip fetching new papers with retrieve, run manubot only on new citations already in STRchive loci json, which will speed things up (runs in minutes):
# snakemake --cores "all" --config stages="old-refs"

# Fetches new citations but doesn't update exising ones. Slow, but faster than "all".
# snakemake --cores "all" --config stages="new-refs"


configfile: 'workflow/config.yaml'
in_json: str = config["input_file"]
base_dir: str = config["base_directory"]
scripts_dir: str = config["scripts_directory"]
ref_directory: str = config["ref_directory"]
stages: str = config["stages"]

### IMPORTS ###
import os
import re

# Wildcard constraints; should all be alphanumeric
wildcard_constraints:
    base_dir = base_dir

if stages == "all" or stages == "new-refs" or stages == "old-refs":
    rule all:
        input:
            # Citations
            expand("{base_dir}STRchive-citations.json", base_dir = base_dir),
            # TRGT bed files
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.TRGT.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.TRGT.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.TRGT.bed", base_dir = base_dir),
            # Atarva bed files
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.atarva.bed.gz", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.atarva.bed.gz", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.atarva.bed.gz", base_dir = base_dir),
            # stranger catalogs
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.stranger.json", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.stranger.json", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.stranger.json", base_dir = base_dir),
            # Straglr bed files
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.straglr.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.straglr.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.straglr.bed", base_dir = base_dir),
            # General BED files
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.general.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.general.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.general.bed", base_dir = base_dir),
            # longTR catalog BED files
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.longTR.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.longTR.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.longTR.bed", base_dir = base_dir),
            # Plots
            # expand("{base_dir}plots/gnomad.json", base_dir = base_dir),
            expand("{base_dir}plots/age-onset.json", base_dir = base_dir),
            expand("{base_dir}plots/path-size.json", base_dir = base_dir),
            # Reference alleles
            expand("{base_dir}ref-alleles/ref-alleles.hg19.txt", base_dir = base_dir),
            expand("{base_dir}ref-alleles/ref-alleles.hg38.txt", base_dir = base_dir),
            expand("{base_dir}ref-alleles/ref-alleles.T2T-chm13.txt", base_dir = base_dir)
elif stages == "skip-refs":
    rule all:
        input:
            # TRGT bed files
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.TRGT.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.TRGT.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.TRGT.bed", base_dir = base_dir),
            # Atarva bed files
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.atarva.bed.gz", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.atarva.bed.gz", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.atarva.bed.gz", base_dir = base_dir),
            # stranger catalogs
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.stranger.json", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.stranger.json", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.stranger.json", base_dir = base_dir),
            # Straglr bed files
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.straglr.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.straglr.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.straglr.bed", base_dir = base_dir),
            # General BED files
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.general.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.general.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.general.bed", base_dir = base_dir),
            # longTR catalog BED files
            expand("{base_dir}catalogs/STRchive-disease-loci.hg38.longTR.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.hg19.longTR.bed", base_dir = base_dir),
            expand("{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.longTR.bed", base_dir = base_dir),
            # Plots
            # expand("{base_dir}plots/gnomad.json", base_dir = base_dir),
            expand("{base_dir}plots/age-onset.json", base_dir = base_dir),
            expand("{base_dir}plots/path-size.json", base_dir = base_dir),
            # Reference alleles
            expand("{base_dir}ref-alleles/ref-alleles.hg19.txt", base_dir = base_dir),
            expand("{base_dir}ref-alleles/ref-alleles.hg38.txt", base_dir = base_dir),
            expand("{base_dir}ref-alleles/ref-alleles.T2T-chm13.txt", base_dir = base_dir)
else:
    raise ValueError("Invalid stages value. Must be 'all', 'new-refs', 'old-refs', or 'skip-refs'")

rule check_loci:
    input:
        in_json = in_json,
        schema = "{base_dir}STRchive-loci.schema.json"
    output:
        check = temp("{base_dir}check-loci.txt")
    shell:
        """
        python {scripts_dir}check-loci.py --schema {input.schema} {input.in_json} 2> {output.check}
        python {scripts_dir}validate-loci.py {input.in_json} {input.schema}
        """

rule retrieve:
    input:
        in_json = in_json,
        lit_dir = "{base_dir}literature",
        check = "{base_dir}check-loci.txt"
    output:
        citations = temp("{base_dir}citations-tmp.json"),
        loci_citations = temp("{base_dir}loci-citations-tmp.json")
    shell:
        """
        Rscript {scripts_dir}get-literature.R {input.in_json} {input.lit_dir} {output.citations} {output.loci_citations}
        """

rule backup_citations:
    input:
        citations = "{base_dir}STRchive-citations.json"
    output:
        backup = temp("{base_dir}STRchive-citations-backup.json")
    shell:
        """
        cp {input.citations} {output.backup}
        """

# Incorporate all citations per locus into the STRchive loci JSON file
rule add_citations:
    input:
        in_json = in_json,
        loci_citations = "{base_dir}loci-citations-tmp.json"
    output:
        check = temp("{base_dir}check-loci-citations.txt")
    shell:
        """
        python {scripts_dir}check-loci.py {input.in_json} --lit {input.loci_citations} 2> {output.check}
        """

# Note, this currently takes hours to run
if stages == "new-refs":
    rule manubot:
        input:
            citations = "{base_dir}citations-tmp.json",
            backup = "{base_dir}STRchive-citations-backup.json",
            check = "{base_dir}check-loci.txt",
            check2 = "{base_dir}check-loci-citations.txt"
        output:
            results = "{base_dir}STRchive-citations.json"
        shell:
            """
            python {scripts_dir}run-manubot.py {input.citations} {output.results} --append {input.backup}
            """
if stages == "old-refs":
    rule manubot:
        input:
            in_json = in_json,
            backup = "{base_dir}STRchive-citations-backup.json",
            check = "{base_dir}check-loci.txt"
        output:
            results = "{base_dir}STRchive-citations.json"
        shell:
            """
            python {scripts_dir}run-manubot.py {input.in_json} {output.results} --append {input.backup} --inloci
            """

if stages == "all" or stages == "skip-refs":
    rule manubot:
        input:
            citations = "{base_dir}citations-tmp.json",
            check = "{base_dir}check-loci.txt",
            check2 = "{base_dir}check-loci-citations.txt"
        output:
            results = "{base_dir}STRchive-citations.json"
        shell:
            """
            python {scripts_dir}run-manubot.py {input.citations} {output.results}
            """

rule TRGT_hg38:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.hg38.TRGT.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f TRGT -g hg38 {input.in_json} {output.results}
        """

rule TRGT_hg19:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.hg19.TRGT.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f TRGT -g hg19 {input.in_json} {output.results}
        """

rule TRGT_T2T:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.TRGT.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f TRGT -g T2T {input.in_json} {output.results}
        """

rule atarva_hg38:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        bed = "{base_dir}catalogs/STRchive-disease-loci.hg38.atarva.bed",
        bed_gz = "{base_dir}catalogs/STRchive-disease-loci.hg38.atarva.bed.gz",
        tbi = "{base_dir}catalogs/STRchive-disease-loci.hg38.atarva.bed.gz.tbi"
    shell:
        """
        python {scripts_dir}make-catalog.py -f atarva -g hg38 {input.in_json} {output.bed}
        bedtools sort -i {output.bed} | bgzip -c > {output.bed_gz}
        tabix -p bed {output.bed_gz}
        """

rule atarva_hg19:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        bed = "{base_dir}catalogs/STRchive-disease-loci.hg19.atarva.bed",
        bed_gz = "{base_dir}catalogs/STRchive-disease-loci.hg19.atarva.bed.gz",
        tbi = "{base_dir}catalogs/STRchive-disease-loci.hg19.atarva.bed.gz.tbi"
    shell:
        """
        python {scripts_dir}make-catalog.py -f atarva -g hg19 {input.in_json} {output.bed}
        bedtools sort -i {output.bed} | bgzip -c > {output.bed_gz}
        tabix -p bed {output.bed_gz}
        """

rule atarva_T2T:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        bed = "{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.atarva.bed",
        bed_gz = "{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.atarva.bed.gz",
        tbi = "{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.atarva.bed.gz.tbi"
    shell:
        """
        python {scripts_dir}make-catalog.py -f atarva -g T2T {input.in_json} {output.bed}
        bedtools sort -i {output.bed} | bgzip -c > {output.bed_gz}
        tabix -p bed {output.bed_gz}
        """

rule stranger_hg38:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.hg38.stranger.json"
    shell:
        """
        python {scripts_dir}make-catalog.py -f stranger -g hg38 {input.in_json} {output.results}
        """

rule stranger_hg19:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.hg19.stranger.json"
    shell:
        """
        python {scripts_dir}make-catalog.py -f stranger -g hg19 {input.in_json} {output.results}
        """

rule stranger_T2T:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.stranger.json"
    shell:
        """
        python {scripts_dir}make-catalog.py -f stranger -g T2T {input.in_json} {output.results}
        """

rule straglr_hg38:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        bed = "{base_dir}catalogs/STRchive-disease-loci.hg38.straglr.bed",
    shell:
        """
        python {scripts_dir}make-catalog.py -f straglr -g hg38 {input.in_json} {output.bed}
        """

rule straglr_hg19:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        bed = "{base_dir}catalogs/STRchive-disease-loci.hg19.straglr.bed",
    shell:
        """
        python {scripts_dir}make-catalog.py -f straglr -g hg19 {input.in_json} {output.bed}
        """

rule straglr_T2T:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        bed = "{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.straglr.bed",
    shell:
        """
        python {scripts_dir}make-catalog.py -f straglr -g T2T {input.in_json} {output.bed}
        """

rule bed_hg38:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.hg38.general.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f bed -g hg38 {input.in_json} {output.results}
        """

rule bed_hg19:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.hg19.general.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f bed -g hg19 {input.in_json} {output.results}
        """

rule bed_T2T:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.general.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f bed -g T2T {input.in_json} {output.results}
        """

rule longTR_hg38:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.hg38.longTR.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f longTR -g hg38 {input.in_json} {output.results}
        """

rule longTR_hg19:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.hg19.longTR.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f longTR -g hg19 {input.in_json} {output.results}
        """

rule longTR_T2T:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.longTR.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f longTR -g T2T {input.in_json} {output.results}
        """

rule age_onset_plot:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}plots/age-onset.json"
    shell:
        """
        python {scripts_dir}age-onset-json.py {input.in_json} {output.results}
        """

rule path_size_plot:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}plots/path-size.json"
    shell:
        """
        python {scripts_dir}path-size-json.py {input.in_json} {output.results}
        """

rule get_ref_alleles:
    input:
        bed_hg19 = "{base_dir}catalogs/STRchive-disease-loci.hg19.bed",
        TRGT_hg19 = "{base_dir}catalogs/STRchive-disease-loci.hg19.TRGT.bed",
        bed_hg38 = "{base_dir}catalogs/STRchive-disease-loci.hg38.bed",
        TRGT_hg38 = "{base_dir}catalogs/STRchive-disease-loci.hg38.TRGT.bed",
        bed_T2T = "{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.bed",
        TRGT_T2T = "{base_dir}catalogs/STRchive-disease-loci.T2T-chm13.TRGT.bed"
    output:
        result_hg19 = "{base_dir}ref-alleles/ref-alleles.hg19.txt",
        result_hg38 = "{base_dir}ref-alleles/ref-alleles.hg38.txt",
        result_T2T = "{base_dir}ref-alleles/ref-alleles.T2T-chm13.txt"
    shell:
        """
        python {scripts_dir}ref-allele.py --beds {input.bed_hg19} {input.TRGT_hg19} --names STRchive TRGT --fasta 'https://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/hg19.fa.gz' --out {output.result_hg19} --storage {ref_directory}
        python {scripts_dir}ref-allele.py --beds {input.bed_hg38} {input.TRGT_hg38} --names STRchive TRGT --fasta 'https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/analysisSet/hg38.analysisSet.fa.gz' --out {output.result_hg38} --storage {ref_directory}
        python {scripts_dir}ref-allele.py --beds {input.bed_T2T} {input.TRGT_T2T} --names STRchive TRGT --fasta 'https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/CHM13/assemblies/analysis_set/chm13v2.0_maskedY_rCRS.fa.gz' --out {output.result_T2T} --storage {ref_directory}
        """


#Input data not in repo

# rule gnomad_plots:
#     input:
#         in_json = in_json,
#         tsv = "{base_dir}plots/gnomAD_STR_genotypes__including_all_age_and_pcr_info__2023_06_28.tsv.gz",
#         check = "{base_dir}check-loci.txt"
#     output:
#         results = "{base_dir}plots/gnomad.json"
#     shell:
#         """
#         python {scripts_dir}gnomad-json.py {input.in_json} {input.tsv} {output.results}
#         """