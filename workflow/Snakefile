# Usage:

# Run all stages (default, takes hours):
# snakemake
# or
# snakemake --config stages="all"

# Skip retrieve and manubot, which will speed things up substantially (runs in seconds):
# snakemake --config stages="skip-refs"

# Fetches new citations but doesn't update exising ones. Slow, but faster than "all".
# snakemake --config stages="new-refs"


configfile: 'workflow/config.yaml'
in_json: str = config["input_file"]
base_dir: str = config["base_directory"]
scripts_dir: str = config["scripts_directory"]
stages: str = config["stages"]

#XXX To do: add STRchive version number to all the bed files?

### IMPORTS ###
import os
import re

# Wildcard constraints; should all be alphanumeric
wildcard_constraints:
    base_dir = base_dir

if stages == "all" or stages == "new-refs":
    rule all:
        input:
            # Check loci
            expand("{base_dir}check-loci.txt", base_dir = base_dir),
            # Citations
            expand("{base_dir}STRchive-citations.json", base_dir = base_dir),
            # TRGT bed files
            expand("{base_dir}STRchive-disease-loci.hg38.TRGT.bed", base_dir = base_dir),
            expand("{base_dir}STRchive-disease-loci.hg19.TRGT.bed", base_dir = base_dir),
            expand("{base_dir}STRchive-disease-loci.T2T-chm13.TRGT.bed", base_dir = base_dir),
            # Extended BED files
            expand("{base_dir}STRchive-disease-loci.hg38.bed", base_dir = base_dir),
            expand("{base_dir}STRchive-disease-loci.hg19.bed", base_dir = base_dir),
            expand("{base_dir}STRchive-disease-loci.T2T-chm13.bed", base_dir = base_dir)
elif stages == "skip-refs":
    rule all:
        input:
            # Check loci
            expand("{base_dir}check-loci.txt", base_dir = base_dir),
            # TRGT bed files
            expand("{base_dir}STRchive-disease-loci.hg38.TRGT.bed", base_dir = base_dir),
            expand("{base_dir}STRchive-disease-loci.hg19.TRGT.bed", base_dir = base_dir),
            expand("{base_dir}STRchive-disease-loci.T2T-chm13.TRGT.bed", base_dir = base_dir),
            # Extended BED files
            expand("{base_dir}STRchive-disease-loci.hg38.bed", base_dir = base_dir),
            expand("{base_dir}STRchive-disease-loci.hg19.bed", base_dir = base_dir),
            expand("{base_dir}STRchive-disease-loci.T2T-chm13.bed", base_dir = base_dir)
else:
    raise ValueError("Invalid stages value. Must be 'all', 'new-refs', or 'skip-refs'")

rule check_loci:
    input:
        in_json = in_json
    output:
        check = temp("{base_dir}check-loci.txt")
    shell:
        """
        python {scripts_dir}check-loci.py {input.in_json} 2> {output.check}
        """

rule retrieve:
    input:
        in_json = in_json,
        lit_dir = "{base_dir}literature",
        check = "{base_dir}check-loci.txt"
    output:
        citations = temp("{base_dir}citations-tmp.json"),
        loci_citations = temp("{base_dir}loci-citations-tmp.json")
    shell:
        """
        Rscript {scripts_dir}get-literature.R {input.in_json} {input.lit_dir} {output.citations} {output.loci_citations}
        """

rule backup_citations:
    input:
        citations = "{base_dir}STRchive-citations.json"
    output:
        backup = temp("{base_dir}STRchive-citations-backup.json")
    shell:
        """
        cp {input.citations} {output.backup}
        """

# Incorporate all citations per locus into the STRchive loci JSON file
rule add_citations:
    input:
        in_json = in_json,
        loci_citations = "{base_dir}loci-citations-tmp.json"
    output:
        check = temp("{base_dir}check-loci-citations.txt")
    shell:
        """
        python {scripts_dir}check-loci.py {input.in_json} --lit {input.loci_citations} 2> {output.check}
        """

# Note, this currently takes hours to run
if stages == "new-refs":
    rule manubot:
        input:
            citations = "{base_dir}citations-tmp.json",
            backup = "{base_dir}STRchive-citations-backup.json",
            check = "{base_dir}check-loci.txt",
            check2 = "{base_dir}check-loci-citations.txt"
        output:
            results = "{base_dir}STRchive-citations.json"
        shell:
            """
            python {scripts_dir}run-manubot.py {input.citations} {output.results} --append {input.backup}
            """
if stages == "all" or stages == "skip-refs":
    rule manubot:
        input:
            citations = "{base_dir}citations-tmp.json",
            check = "{base_dir}check-loci.txt",
            check2 = "{base_dir}check-loci-citations.txt"
        output:
            results = "{base_dir}STRchive-citations.json"
        shell:
            """
            python {scripts_dir}run-manubot.py {input.citations} {output.results}
            """

rule TRGT_hg38:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}STRchive-disease-loci.hg38.TRGT.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f TRGT -g hg38 {input.in_json} {output.results}
        """

rule TRGT_hg19:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}STRchive-disease-loci.hg19.TRGT.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f TRGT -g hg19 {input.in_json} {output.results}
        """

rule TRGT_T2T:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}STRchive-disease-loci.T2T-chm13.TRGT.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f TRGT -g T2T {input.in_json} {output.results}
        """

rule bed_hg38:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}STRchive-disease-loci.hg38.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f bed -g hg38 {input.in_json} {output.results}
        """

rule bed_hg19:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}STRchive-disease-loci.hg19.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f bed -g hg19 {input.in_json} {output.results}
        """

rule bed_T2T:
    input:
        in_json = in_json,
        check = "{base_dir}check-loci.txt"
    output:
        results = "{base_dir}STRchive-disease-loci.T2T-chm13.bed"
    shell:
        """
        python {scripts_dir}make-catalog.py -f bed -g T2T {input.in_json} {output.results}
        """