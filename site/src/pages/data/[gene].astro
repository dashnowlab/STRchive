---
import { FaBookMedical, FaDisease, FaDna, FaPills } from "react-icons/fa6";
import Link from "@/components/Link";
import Layout from "@/layouts/Layout.astro";
import { lerp } from "@/util/math";
import { capitalize } from "@/util/string";
import { deriveDatum } from "./_derived";
import { tagOptions } from "./_tags";
import data from "../../../../data/STRchive-database.json";

/** generate pages for each datum, paths based on gene name */
export const getStaticPaths = async () =>
  data.map(({ gene }) => ({ params: { gene } }));

/** current page gene name in url */
const { gene } = Astro.params;

/** look up full data entry from gene name  */
const d = deriveDatum(data.find((entry) => entry.gene === gene));

/** list of identifiers */
const identifiers = [
  {
    key: "OMIM",
    name: "OMIM",
    link: "https://omim.org/entry/$ID",
    Icon: FaDisease,
  },
  {
    key: "Mondo",
    name: "Mondo",
    link: "https://purl.obolibrary.org/obo/MONDO_$ID",
    Icon: FaDisease,
  },
  {
    key: "MedGen",
    name: "MedGen",
    link: "https://www.ncbi.nlm.nih.gov/medgen/?term=$ID",
    Icon: FaBookMedical,
  },
  {
    key: "Orphanet",
    name: "Orphanet",
    link: "https://www.orpha.net/en/disease/detail/$ID",
    Icon: FaPills,
  },
  {
    key: "GARD",
    name: "GARD",
    link: "https://rarediseases.info.nih.gov/diseases/$ID/index",
    Icon: FaDna,
  },
  {
    key: "GeneReviews",
    name: "GeneReviews",
    link: "https://www.ncbi.nlm.nih.gov/books/$ID",
    Icon: FaDna,
  },
  {
    key: "gnomAD_gene",
    name: "gnomAD",
    link: "https://gnomad.broadinstitute.org/short-tandem-repeat/$ID?dataset=gnomad_r4",
    Icon: FaDna,
  },
  {
    key: "STRipy_gene",
    name: "STRipy",
    link: "https://stripy.org/database/$ID",
    Icon: FaDna,
  },
  {
    key: "WebSTR_hg38",
    name: "WebSTR hg38",
    link: "https://webstr.ucsd.edu/search?genome=hg38&query=$ID",
    Icon: FaDna,
  },
  {
    key: "WebSTR_hg19",
    name: "WebSTR hg19",
    link: "https://webstr.ucsd.edu/search?genome=hg19&query=$ID",
    Icon: FaDna,
  },
]
  .map(({ key, link, ...rest }) => ({
    ...rest,
    value: d[key],
    link: link.replace("$ID", d[key]),
  }))
  .filter(({ value }) => value);
---

<Layout title={d.gene}>
  <section>
    <h1><FaDna /> {d.gene}</h1>

    <div class="boxes">
      <div class="box">
        <div>Disease</div>
        <div>{d.disease}</div>
      </div>

      <div class="box">
        <div>Disease ID</div>
        <div>{d.disease_id}</div>
      </div>

      <div class="box">
        <div>Inheritance</div>
        <div>{d.Inheritance}</div>
      </div>

      <div class="box">
        <div>Age of Onset</div>
        <div>{d.age_onset_min} &ndash; {d.age_onset_max}</div>
      </div>
    </div>

    <div class="identifiers">
      {
        identifiers.map(({ name, value, Icon, link }) => (
          <div class="identifier">
            <Icon />
            <span>{name}</span>
            {value.map((value) => (
              <Link to={link} noIcon>{value}</Link>
            ))}
          </div>
        ))
      }
    </div>

    <div class="tags">
      {
        d.tags?.map((tag) => {
          const option = tagOptions.find((t) => t.value === tag);
          if (!option) return tag;
          const { Icon, color } = option;
          return (
            <div
              class="tag"
              style={{ background: `color-mix(in srgb, white, 25% ${color})` }}
              data-tooltip={option.tooltip}
            >
              <Icon style={{ color }} />
              {capitalize(tag)}
            </div>
          );
        })
      }
    </div>
  </section>

  <section>
    <h2>Locus</h2>

    <div class="boxes">
      {
        ["hg19", "hg38", "t2t"].map((assembly) => (
          <div class="box">
            <div>{assembly}</div>
            <div>
              {d.chrom}:{d[`start_${assembly}`]}-{d[`stop_${assembly}`]}
            </div>
          </div>
        ))
      }
    </div>

    <h2>Alleles</h2>

    <div class="boxes">
      <div class="box" data-tooltip="Reference motif, reference orientation">
        <div>Ref. Motif</div>
        <div>{d.reference_motif_reference_orientation}</div>
      </div>
      <div class="box" data-tooltip="Pathogenic motif, reference orientation">
        <div>Pathogenic (ref.)</div>
        <div>{d.pathogenic_motif_reference_orientation}</div>
      </div>
      <div class="box" data-tooltip="Pathogenic motif, gene orientation">
        <div>Pathogenic (gene)</div>
        <div>{d.pathogenic_motif_gene_orientation}</div>
      </div>
    </div>

    {
      () => {
        /** get allele values */
        let { normal_min, normal_max, pathogenic_min, pathogenic_max } = d;

        /** all values */
        const minMaxes = [
          normal_min,
          normal_max,
          pathogenic_min,
          pathogenic_max,
        ];
        if (!minMaxes.every(Boolean)) return "";

        /** size in svg units */
        const width = 200;
        const height = 50;
        const fontSize = 7;
        const row1 = height * 0.3;
        const row2 = height * 0.7;

        /** map value to svg units */
        const min = Math.min(...minMaxes);
        const max = Math.max(...minMaxes);
        const scale = (value) =>
          lerp(value, min, max, fontSize * 2, width - fontSize * 2);
        normal_min = scale(normal_min);
        normal_max = scale(normal_max);
        pathogenic_min = scale(pathogenic_min);
        pathogenic_max = scale(pathogenic_max);

        const makeCaret = (x, y, sign) =>
          [
            "M",
            x,
            y - fontSize * 0.25,
            "l",
            sign * fontSize * 0.5,
            -fontSize * 0.5,
            "h",
            -sign * fontSize * 0.5,
            "z",
          ].join(" ");

        return (
          <svg class="alleles" style={{ fontSize: fontSize + "px" }}>
            <path
              fill="none"
              stroke="black"
              d={`M 0 0 L 0 ${height} L ${width} ${height}`}
            />

            <g text-anchor="end" dominant-baseline="central">
              <text x={-fontSize * 0.5} y={row1}>
                Benign
              </text>
              <text x={-fontSize * 0.5} y={row2}>
                Pathogenic
              </text>
            </g>

            <text
              x={width / 2}
              y={height + fontSize * 0.5}
              text-anchor="middle"
              dominant-baseline="hanging"
            >
              Units
            </text>

            <rect
              fill="var(--primary)"
              x={normal_min}
              y={row1 - fontSize * 0.25}
              width={normal_max - normal_min}
              height={fontSize * 0.5}
            />

            <rect
              fill="var(--secondary)"
              x={pathogenic_min}
              y={row2 - fontSize * 0.25}
              width={pathogenic_max - pathogenic_min}
              height={fontSize * 0.5}
            />

            <path d={makeCaret(normal_min, row1, -1)} />
            <path d={makeCaret(normal_max, row1, 1)} />
            <path d={makeCaret(pathogenic_min, row2, -1)} />
            <path d={makeCaret(pathogenic_max, row2, 1)} />

            <text x={normal_min} y={row1 - fontSize * 1} text-anchor="end">
              {d.normal_min.toLocaleString()}&nbsp;
            </text>
            <text x={normal_max} y={row1 - fontSize * 1}>
              &nbsp;{d.normal_max.toLocaleString()}
            </text>
            <text x={pathogenic_min} y={row2 - fontSize * 1} text-anchor="end">
              {d.pathogenic_min.toLocaleString()}&nbsp;
            </text>
            <text x={pathogenic_max} y={row2 - fontSize * 1}>
              &nbsp;{d.pathogenic_max.toLocaleString()}
            </text>
          </svg>
        );
      }
    }
    <script>
      import { fitViewBox } from "@/util/dom";

      fitViewBox(document.querySelector(".alleles"), 5);
    </script>
  </section>

  <script define:vars={{ d }}>
    console.debug(d);
  </script>
</Layout>

<style>
  .boxes {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    margin: 20px 0;
    gap: 20px;
  }

  .box {
    display: inline-flex;
    flex-direction: column;
    padding: 10px 20px;
    gap: 5px;
    border-radius: var(--rounded);
    background: var(--light-gray);
    overflow-wrap: anywhere;
  }

  .box > :first-child {
    color: var(--gray);
  }

  .box > :not(:first-child) {
    font-weight: var(--medium);
    font-size: 1.1rem;
  }

  .identifiers {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    margin: 20px 0;
    gap: 10px 40px;
  }

  .identifier {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .identifier svg {
    color: var(--gray);
  }

  .identifier span {
    font-weight: var(--bold);
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    gap: 10px;
  }

  .tag {
    display: flex;
    align-items: center;
    padding: 5px 10px;
    gap: 5px;
    border-radius: 999px;
  }

  .alleles {
    max-width: 100%;
    height: 200px;
    margin: 20px 0;
    overflow: visible;
  }
</style>
