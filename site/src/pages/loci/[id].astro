---
/** LOCUS PAGE */

import { FaCircleMinus, FaCirclePlus, FaRegCalendar } from "react-icons/fa6";
import { LiaBarcodeSolid, LiaSlashSolid } from "react-icons/lia";
import { TbDna2, TbVirus } from "react-icons/tb";
import Heading from "@/components/Heading.astro";
import LineChart from "@/components/LineChart";
import Link from "@/components/Link";
import ShowMoreLines from "@/components/ShowMoreLines";
import TableOfContents from "@/components/TableOfContents";
import { deriveLocus } from "@/data/derived";
import { getIdentifiers } from "@/data/identifiers";
import { getInheritance } from "@/data/inheritance";
import Layout from "@/layouts/Layout.astro";
import { repo } from "@/layouts/meta";
import AdditionalLiterature from "@/locus/AdditionalLiterature";
import Citation from "@/locus/Citation";
import Cited from "@/locus/Cited";
import Gnomad from "@/locus/Gnomad";
import Tag from "@/locus/Tag";
import { getJsonBlame } from "@/util/git";
import gnomad from "../../../../data/plots/gnomad.json";
import citations from "../../../../data/STRchive-citations.json";
import loci from "../../../../data/STRchive-loci.json";

/** generate pages for each datum, paths based on id */
export const getStaticPaths = async () =>
  loci.map(({ id }) => ({ params: { id } }));

/** current page loci id in url */
const { id } = Astro.params;

/** look up full locus entry from id */
const locus = deriveLocus(
  loci.find((locus) => locus.id === id) || {},
  loci,
  citations,
);

/** whether there is raw gene search text file associated with this gene */
const hasRawSearch = Object.keys(
  await import.meta.glob("../../../../data/literature/*.txt", { eager: true }),
).some((file) => file.includes(locus.gene));

/** get blame info of locus */
const blame = getJsonBlame(
  "../data/STRchive-loci.json",
  `"id":\\s*"${id}"\\s*,`,
);
---

<Layout title={locus.nice_id}>
  <TableOfContents client:only="react" />

  <!-- overview -->
  <section>
    <Heading level={1}><LiaBarcodeSolid />{locus.nice_id}</Heading>

    {
      !!locus.locus_tags.length && (
        <div class="tags">
          {locus.locus_tags?.map((tag) => (
            <Tag value={tag} />
          ))}
        </div>
      )
    }

    <div class="boxes">
      <div class="box">
        <div><TbVirus />Disease ID</div>
        <div>{locus.disease_id}</div>
      </div>

      <div class="box">
        <div><TbDna2 />Gene ID</div>
        <div>{locus.gene}</div>
      </div>

      <div class="box">
        <div><FaRegCalendar />Updated</div>
        <div>
          {blame.date}
          <br />
          {blame.version}
        </div>
      </div>
    </div>

    {
      locus.genes.length > 1 && (
        <div class="genes">
          <div class="heading">
            <TbDna2 />
            Other gene loci ({locus.genes.length.toLocaleString()})
          </div>
          <div class="gene-list">
            {locus.genes.map((gene) =>
              id === gene.id ? (
                <span>{gene.id}</span>
              ) : (
                <Link to={`/loci/${gene.id}`}>{gene.id}</Link>
              ),
            )}
          </div>
        </div>
      )
    }

    <div class="identifiers">
      {
        getIdentifiers(locus).map(({ name, Icon, identifiers }) => (
          <div>
            <div class="heading">
              <Icon />
              <span>{name}</span>
            </div>
            <div class="identifier-list">
              {identifiers.map(({ name, links, tooltip, info }) => (
                <>
                  <Link to={info} data-tooltip={tooltip} showArrow={false}>
                    {name}
                  </Link>
                  <div class="identifier-links">
                    {links.map(({ label, link }) => (
                      <Link to={link}>{label}</Link>
                    ))}
                  </div>
                </>
              ))}
            </div>
          </div>
        ))
      }
    </div>
  </section>

  <!-- disease info -->
  <section>
    <Heading level={2}>Disease</Heading>
    {
      !!locus.disease_tags.length && (
        <div class="tags">
          {locus.disease_tags?.map((tag) => (
            <Tag value={tag} />
          ))}
        </div>
      )
    }

    <div class="boxes">
      <div class="box">
        <div>Name</div>
        <div>{locus.disease}</div>
      </div>

      <div class="box">
        <div>Inheritance</div>
        {
          (locus.inheritance.length ? locus.inheritance : [""]).map(
            (inheritance) => (
              <Link to="https://www.ncbi.nlm.nih.gov/books/NBK132145/">
                {getInheritance(inheritance) || "-"}
              </Link>
            ),
          )
        }
      </div>
    </div>

    <div class="boxes">
      {
        locus.disease_description && (
          <div class="box wide">
            <div>Description</div>
            <ShowMoreLines client:load lines={3}>
              <Cited client:load value={locus.disease_description} />
            </ShowMoreLines>
          </div>
        )
      }

      {
        (locus.prevalence || locus.prevalence_details) && (
          <div class="box wide">
            <div>Prevalence</div>
            {locus.prevalence && (
              <div class="fraction">
                <span>{locus.prevalence[0]}</span>
                <LiaSlashSolid />
                <span>{locus.prevalence[1]}</span>
              </div>
            )}
            {locus.prevalence_details && (
              <ShowMoreLines client:load lines={1}>
                <Cited client:load value={locus.prevalence_details} />
              </ShowMoreLines>
            )}
          </div>
        )
      }
    </div>

    <div class="boxes">
      <LineChart
        client:load
        rows={[
          {
            name: "Age of Onset",
            color: "var(--primary)",
            values: [locus.age_onset_min, locus.age_onset_max],
          },
          {
            name: "(Typical)",
            color: "var(--secondary)",
            values: [locus.typ_age_onset_min, locus.typ_age_onset_max],
          },
        ]}
        min={0}
        max={90}
        xAxis="Years"
        width={200}
        height={50}
      />

      {
        locus.age_onset && (
          <div class="box wide">
            <div>Age of Onset Details</div>
            <ShowMoreLines client:load lines={3}>
              <Cited client:load value={locus.age_onset} />
            </ShowMoreLines>
          </div>
        )
      }
    </div>
  </section>

  <!-- locus info -->
  <section>
    <Heading level={2}>Locus</Heading>

    <div class="boxes">
      {
        [
          { assembly: "hg19", db: "hg19" },
          { assembly: "hg38", db: "hg38" },
          { assembly: "t2t", db: "hub_3671779_hs1" },
        ].map(({ assembly, db }) => (
          <div class="box">
            <div>{assembly}</div>
            <Link
              to={`http://genome.ucsc.edu/cgi-bin/hgTracks?db=${db}&position=${locus[`position_${assembly}`]}`}
            >
              {locus[`position_${assembly}`]}
            </Link>
          </div>
        ))
      }
    </div>

    <div class="boxes">
      {
        locus.details && (
          <div class="box wide">
            <div>Details</div>
            <ShowMoreLines client:load lines={3}>
              <Cited client:load value={locus.details} />
            </ShowMoreLines>
          </div>
        )
      }

      {
        (locus.mechanism || locus.mechanism_detail) && (
          <div class="box wide">
            <div>Mechanism</div>
            {locus.mechanism && <div>{locus.mechanism}</div>}
            {locus.mechanism_detail && (
              <ShowMoreLines client:load lines={1}>
                <Cited client:load value={locus.mechanism_detail} />
              </ShowMoreLines>
            )}
          </div>
        )
      }
    </div>

    <div class="boxes">
      {
        locus.year && (
          <div class="box">
            <div data-tooltip="Year first published">Year</div>
            <div>
              <Cited client:load value={locus.year} />
            </div>
          </div>
        )
      }

      {
        locus.location_in_gene && (
          <div class="box">
            <div>Location in Gene</div>
            <div>{locus.location_in_gene}</div>
          </div>
        )
      }

      {
        locus.gene_strand && (
          <div class="box">
            <div>Gene Strand</div>
            <div>
              {locus.gene_strand === "+" && (
                <FaCirclePlus style={{ color: "var(--primary)" }} />
              )}
              {locus.gene_strand === "-" && (
                <FaCircleMinus style={{ color: "var(--secondary)" }} />
              )}
            </div>
          </div>
        )
      }
    </div>

    <!-- allele info -->
    <Heading level={2}>Alleles</Heading>

    <div class="allele-list">
      {
        !!locus.reference_motif_reference_orientation.length && (
          <div class="box">
            <div data-tooltip="Reference motif, reference orientation">
              Ref. Motif
            </div>
            <div>{locus.reference_motif_reference_orientation.join(", ")}</div>
          </div>
        )
      }

      {
        (!!locus.benign_motif_reference_orientation.length ||
          !!locus.benign_motif_gene_orientation.length) && (
          <>
            <div class="box benign">
              <div data-tooltip="Benign motif, reference orientation">
                Benign (ref.)
              </div>
              <div>
                {locus.benign_motif_reference_orientation.join(", ") || "-"}
              </div>
            </div>
            <div class="box benign">
              <div data-tooltip="Benign motif, gene orientation">
                Benign (gene)
              </div>
              <div>{locus.benign_motif_gene_orientation.join(", ") || "-"}</div>
            </div>
          </>
        )
      }

      {
        (!!locus.pathogenic_motif_reference_orientation.length ||
          !!locus.pathogenic_motif_gene_orientation.length) && (
          <>
            <div class="box pathogenic">
              <div data-tooltip="Pathogenic motif, reference orientation">
                Pathogenic (ref.)
              </div>
              <div>
                {locus.pathogenic_motif_reference_orientation.join(", ") || "-"}
              </div>
            </div>
            <div class="box pathogenic">
              <div data-tooltip="Pathogenic motif, gene orientation">
                Pathogenic (gene)
              </div>
              <div>
                {locus.pathogenic_motif_gene_orientation.join(", ") || "-"}
              </div>
            </div>
          </>
        )
      }

      {
        (!!locus.unknown_motif_reference_orientation.length ||
          !!locus.unknown_motif_gene_orientation.length) && (
          <>
            <div class="box unknown">
              <div data-tooltip="Unknown motif, reference orientation">
                Unknown (ref.)
              </div>
              <div>
                {locus.unknown_motif_reference_orientation.join(", ") || "-"}
              </div>
            </div>
            <div class="box unknown">
              <div data-tooltip="Unknown motif, gene orientation">
                Unknown (gene)
              </div>
              <div>
                {locus.unknown_motif_gene_orientation.join(", ") || "-"}
              </div>
            </div>
          </>
        )
      }
    </div>

    <LineChart
      client:load
      rows={[
        {
          name: "Benign",
          color: "var(--primary)",
          values: [locus.benign_min, locus.benign_max],
        },
        {
          name: "Intermediate",
          color: "var(--tertiary)",
          values: [locus.intermediate_min, locus.intermediate_max],
        },
        {
          name: "Pathogenic",
          color: "var(--secondary)",
          values: [locus.pathogenic_min, locus.pathogenic_max],
        },
      ]}
      xAxis="Units"
      width={200}
      height={75}
    />
  </section>

  <!-- gnomad data -->
  {
    gnomad[id] && gnomad[id].reliable && (
      <section>
        <Heading level={2}>gnomAD</Heading>

        <Gnomad client:only="react" title={locus.gene} data={gnomad[id]} />
      </section>
    )
  }

  <!-- references -->
  {
    !!locus.references.length && (
      <section>
        <Heading level={2}>References</Heading>

        <p class="center">
          Direct supporting references for info on this page.
        </p>

        <div class="citations">
          {locus.references.map((citation) => (
            <Citation client:load {...citation} />
          ))}
        </div>
      </section>
    )
  }

  <!-- additional literature -->
  {
    (!!locus.additional_literature.length || hasRawSearch) && (
      <section>
        <Heading level={2}>Additional Literature</Heading>

        {!!locus.additional_literature.length && (
          <p class="center">Additional literature related to this locus.</p>
        )}

        {hasRawSearch && (
          <p class="center">
            <Link to={`${repo}/blob/main/data/literature/${locus.gene}01.txt`}>
              Raw PubMed search results
            </Link>{" "}
            <br />
            (All PubMed results returned by searching for this gene, tandem
            repeats, and disease, in medline format)
          </p>
        )}

        {!!locus.additional_literature.length && (
          <div class="citations">
            <AdditionalLiterature
              client:load
              additionalLiterature={locus.additional_literature}
            />
          </div>
        )}
      </section>
    )
  }

  <script define:vars={{ locus }}>
    console.debug(locus);
  </script>
</Layout>

<style>
  .tags {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    margin: 40px 0;
    gap: 10px;
  }

  .boxes {
    /* display: grid; */
    /* grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); */
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    margin: 20px auto;
    gap: 20px;
  }

  .boxes :global(svg) {
    margin: 0;
  }

  .box {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    padding: 10px 20px;
    gap: 10px;
    border-radius: var(--rounded);
    background: var(--light-gray);
    overflow-wrap: anywhere;
  }

  .box > :first-child svg {
    opacity: 0.5;
  }

  .wide {
    /* grid-column-end: span 2; */
    max-width: calc(50% - 10px);
  }

  .box > :first-child {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
    color: var(--gray);
    font-weight: var(--bold);
  }

  .fraction {
    display: flex;
    align-items: center;
    padding: 0.5em;
  }

  .fraction > * {
    position: relative;
  }

  .fraction > :nth-child(1) {
    top: -0.5em;
  }

  .fraction > :nth-child(2) {
    color: var(--gray);
  }

  .fraction > :nth-child(3) {
    top: 0.5em;
  }

  .allele-list {
    display: grid;
    grid-template-columns: 1fr 1fr;
    max-width: max-content;
    margin: 20px auto;
    gap: 20px;
  }

  .allele-list > :first-child {
    grid-column: 1 / -1;
  }

  @media (max-width: 600px) {
    .allele-list {
      grid-template-columns: 1fr;
    }
  }

  .benign {
    background: color-mix(in srgb, var(--primary), white 90%);
  }

  .pathogenic {
    background: color-mix(in srgb, var(--secondary), white 90%);
  }

  .unknown {
    background: color-mix(in srgb, var(--tertiary), white 90%);
  }

  .genes {
    margin: 40px 0;
  }

  .heading {
    display: inline-flex;
    align-items: center;
    margin-bottom: 10px;
    gap: 10px;
    font-weight: var(--bold);
  }

  .heading svg {
    opacity: 0.5;
  }

  .gene-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, max-content));
    place-content: center;
    place-items: center;
    gap: 10px 20px;
  }

  .identifiers {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    margin: 40px 0;
    gap: 40px;
    text-align: left;
  }

  .identifier-list {
    display: grid;
    grid-template-columns: auto auto;
    place-content: flex-start;
    place-items: flex-start;
    gap: 5px 20px;
  }

  .identifier-list > :nth-child(odd) {
    color: var(--black);
    text-decoration: none;
  }

  .identifier-links {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }

  .citations {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    align-items: flex-start;
    gap: 20px;
  }
</style>
