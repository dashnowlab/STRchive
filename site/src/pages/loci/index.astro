---
/** LOCI PAGE */

import Layout from "@/layouts/Layout.astro";
import { FaArrowDown, FaChartLine, FaGithub } from "react-icons/fa6";
import { LiaBarcodeSolid } from "react-icons/lia";
import { LuChartCandlestick, LuChartGantt } from "react-icons/lu";
import { filter, groupBy, map, uniq } from "lodash-es";
import Button from "@/components/Button";
import Heading from "@/components/Heading.astro";
import Link from "@/components/Link";
import PlotlyChart from "@/components/PlotlyChart";
import TableOfContents from "@/components/TableOfContents";
import { repo, version } from "@/layouts/meta";
import Table from "@/loci/Table";
import ageOnset from "../../../../data/plots/age-onset.json";
import pathSize from "../../../../data/plots/path-size.json";
import loci from "../../../../data/STRchive-loci.json";

/** import catalog files */
const catalogs = Object.keys(
  import.meta.glob(`../../../../data/catalogs/STRchive-disease-loci*.*`, {
    query: "?url",
    import: "default",
    eager: true,
  }),
).map((path) => {
  /** last part of path */
  let filename = path.split("/").pop();
  /** filename parts */
  const [prefix, genome, software, ...extensions] = filename.split(".");
  /** insert version in download filename */
  filename = filename.replace(/(STRchive-disease-loci)/, `$1-v${version}`);
  return {
    path,
    filename,
    genome,
    software,
    extension: ["", ...extensions].join("."),
  };
});

/** group into cols by genome */
const genomes = uniq(map(catalogs, "genome"));
/** group into rows by software */
const softwares = groupBy(catalogs, "software");
---

<Layout title="Loci">
  <TableOfContents client:only="react" />

  <section>
    <Heading level={1}><LiaBarcodeSolid />Loci</Heading>

    <div class="row">
      <span> Tandem repeat loci associated with Mendelian diseases. </span>

      <Button to={`${repo}/tree/main/data`} design="bubble">
        <FaGithub /><span>Full Dataset</span>
      </Button>
    </div>

    <Table client:load loci={loci} />
  </section>

  <!-- downloads -->
  <section>
    <Heading level={2}><FaArrowDown />Downloads</Heading>

    <table>
      <thead>
        <tr>
          <th></th>
          {genomes.map((genome, index) => <th>{genome}</th>)}
        </tr>
      </thead>

      <tbody>
        {
          Object.entries(softwares).map(([software, entries]) => (
            <tr>
              <td>{software}</td>
              {genomes.map((genome) => (
                <td>
                  {filter(entries, (entry) => entry.genome === genome).map(
                    (download) => (
                      <>
                        <Button
                          to={download.path}
                          download={download.filename}
                          design="plain"
                        >
                          {download.extension}
                        </Button>
                        &nbsp;
                      </>
                    ),
                  )}
                </td>
              ))}
            </tr>
          ))
        }
      </tbody>
    </table>
  </section>

  <!-- plots -->
  <section class="full">
    <Heading level={2}><FaChartLine />Plots</Heading>

    <p class="center">High-level, visual overview of loci.</p>

    <div class="charts">
      <div class="col">
        <Heading level={3}><LuChartGantt />Pathogenic Size Range</Heading>
        <PlotlyChart
          client:only="react"
          data={pathSize.data}
          layout={pathSize.layout}
        />
      </div>

      <div class="col">
        <Heading level={3}><LuChartCandlestick />Age of Onset</Heading>
        <PlotlyChart
          client:only="react"
          data={ageOnset.data}
          layout={ageOnset.layout}
        />
      </div>
    </div>
  </section>
</Layout>
