---
/** LOCI PAGE */

import Layout from "@/layouts/Layout.astro";
import { FaArrowDown, FaChartLine, FaGithub } from "react-icons/fa6";
import { LiaBarcodeSolid } from "react-icons/lia";
import { LuChartCandlestick, LuChartGantt } from "react-icons/lu";
import Ajv from "ajv/dist/2020";
import { filter, groupBy, map, uniq } from "lodash-es";
import Button from "@/components/Button";
import Heading from "@/components/Heading.astro";
import Link from "@/components/Link";
import PlotlyChart from "@/components/PlotlyChart";
import TableOfContents from "@/components/TableOfContents";
import { repo, repoRaw, version } from "@/layouts/meta";
import Table from "@/loci/Table";
import ageOnset from "../../../../data/plots/age-onset.json";
import pathSize from "../../../../data/plots/path-size.json";
import loci from "../../../../data/STRchive-loci.json";
import schema from "../../../../data/STRchive-loci.schema.json";

/** test schema validation */
const ajv = new Ajv({ strict: false });
const validate = ajv.compile(schema);
const isValid = loci.map((locus) => {
  validate(locus);
  return validate.errors;
});
console.log(isValid);

/** import catalog files */
const catalogs = Object.keys(
  import.meta.glob(`../../../../data/catalogs/STRchive-disease-loci*.*`, {
    query: "?url",
    import: "default",
    eager: true,
  }),
).map((path) => {
  /** last part of path */
  path = path.split("/").pop();
  /** filename parts */
  const [prefix, genome, software, ...extensions] = path.split(".");
  /** insert version in download filename */
  const filename = path.replace(/(STRchive-disease-loci)/, `$1-v${version}`);
  return {
    path,
    filename,
    genome,
    software,
    extension: ["", ...extensions].join("."),
  };
});

/** rows, by software */
const rows = [
  {
    key: "general",
    primary: "General",
    secondary:
      "a general-purpose extended bed file for filtering and annotating loci",
  },

  {
    key: "TRGT",
    primary: "TRGT",
    secondary: "for genotyping full allele sequences in PacBio HiFi reads",
    link: "https://github.com/PacificBiosciences/trgt",
  },
  {
    key: "atarva",
    primary: "Atarva",
    secondary: "for genotyping full allele sequences in long-read data",
    link: "https://github.com/SowpatiLab/ATaRVa",
  },
  {
    key: "longTR",
    primary: "LongTR",
    secondary: "for genotyping full allele sequences in long-read data",
    link: "https://github.com/gymrek-lab/LongTR",
  },
  {
    key: "straglr",
    primary: "Straglr",
    secondary: "for genotyping allele sizes in long read-data",
    link: "https://github.com/bcgsc/straglr",
  },
  {
    key: "stranger",
    primary: "Stranger",
    secondary:
      "for annotating TRGT or ExpansionHunter allele sizes with pathologic implications.",
    link: "https://github.com/Clinical-Genomics/stranger",
  },
];

/** columns, by genome */
const cols = uniq(map(catalogs, "genome"));
---

<Layout title="Loci">
  <TableOfContents client:only="react" />

  <section>
    <Heading level={1}><LiaBarcodeSolid />Loci</Heading>

    <div class="row">
      <span> Tandem repeat loci associated with Mendelian diseases. </span>

      <Button to={`${repo}/tree/main/data`} design="bubble">
        <FaGithub /><span>Full Dataset</span>
      </Button>
    </div>

    <Table client:load loci={loci} />
  </section>

  <!-- downloads -->
  <section>
    <Heading level={2}><FaArrowDown />Downloads</Heading>

    <div class="table-scroll">
      <table class="downloads">
        <thead>
          <tr>
            <th></th>
            {cols.map((col) => <th>{col}</th>)}
          </tr>
        </thead>

        <tbody>
          {
            rows.map((row) => (
              <tr>
                <td>
                  {row.link ? (
                    <Link to={row.link}>
                      <strong>{row.primary}</strong>
                    </Link>
                  ) : (
                    <div>
                      <strong>{row.primary}</strong>
                    </div>
                  )}

                  <div>{row.secondary}</div>
                </td>
                {cols.map((col) => (
                  <td>
                    <div class="buttons">
                      {filter(
                        catalogs,
                        (catalog) =>
                          catalog.software == row.key && catalog.genome === col,
                      ).map((download) => (
                        <Button
                          to={`${repoRaw}/refs/heads/main/data/catalogs/${download.path}`}
                          download={download.filename}
                          design="plain"
                          arrow={false}
                        >
                          {download.extension}
                        </Button>
                      ))}
                    </div>
                  </td>
                ))}
              </tr>
            ))
          }
        </tbody>
      </table>
    </div>
  </section>

  <!-- plots -->
  <section class="full">
    <Heading level={2}><FaChartLine />Plots</Heading>

    <p class="center">High-level, visual overview of loci.</p>

    <div class="charts">
      <div class="col">
        <Heading level={3}><LuChartGantt />Pathogenic Size Range</Heading>
        <PlotlyChart
          client:only="react"
          data={pathSize.data}
          layout={pathSize.layout}
        />
      </div>

      <div class="col">
        <Heading level={3}><LuChartCandlestick />Age of Onset</Heading>
        <PlotlyChart
          client:only="react"
          data={ageOnset.data}
          layout={ageOnset.layout}
        />
      </div>
    </div>
  </section>
</Layout>

<style>
  .downloads td:first-child {
    width: 35%;
    text-align: left;
  }

  .buttons {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 5px;
  }
</style>
